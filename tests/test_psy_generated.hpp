/**
 * @file generated.hpp
 * @brief Generated by psy-c from schema
 * @warning This file is auto-generated. Do not edit manually.
 */

#pragma once

#include <psyfer.hpp>
#include <array>
#include <cstdint>
#include <memory>
#include <span>
#include <string>
#include <variant>
#include <vector>
#include <map>
#include <optional>

namespace test {

struct UserData;
struct SecureMessage;

/**
 * @brief Struct: UserData
 */
struct UserData {
    std::string username;
    /**
     * @brief @encrypted(aes256)
     */
    std::string password;
    uint32_t user_id;
    
    /**
     * @brief Serialization methods
     */
    [[nodiscard]] size_t serialized_size() const noexcept;
    [[nodiscard]] size_t serialize(std::span<std::byte> buffer) const noexcept;
    [[nodiscard]] std::vector<std::byte> serialize() const;
    [[nodiscard]] static std::optional<UserData> deserialize(std::span<const std::byte> buffer) noexcept;
    [[nodiscard]] static size_t deserialize(
        std::span<const std::byte> source_buffer,
        UserData* target
    ) noexcept;
    
    /**
     * @brief Encryption methods
     */
    [[nodiscard]] size_t encrypted_size() const noexcept;
    [[nodiscard]] size_t encrypt(
        std::span<std::byte> buffer,
        std::span<const std::byte> key
    ) const noexcept;
    [[nodiscard]] std::vector<std::byte> encrypt(
        std::span<const std::byte> key
    ) const;
    [[nodiscard]] static std::optional<UserData> decrypt(
        std::span<const std::byte> buffer,
        std::span<const std::byte> key
    ) noexcept;
    [[nodiscard]] static size_t decrypt(
        std::span<const std::byte> source_buffer,
        UserData* target,
        std::span<const std::byte> key
    ) noexcept;
};

/**
 * @brief Struct: SecureMessage
 */
/**
 * @brief @encrypted
 */
struct SecureMessage {
    uint64_t timestamp;
    std::string sender;
    /**
     * @brief @compress(lz4)
     */
    std::string content;
    std::vector<std::byte> signature;
    
    /**
     * @brief Serialization methods
     */
    [[nodiscard]] size_t serialized_size() const noexcept;
    [[nodiscard]] size_t serialize(std::span<std::byte> buffer) const noexcept;
    [[nodiscard]] std::vector<std::byte> serialize() const;
    [[nodiscard]] static std::optional<SecureMessage> deserialize(std::span<const std::byte> buffer) noexcept;
    [[nodiscard]] static size_t deserialize(
        std::span<const std::byte> source_buffer,
        SecureMessage* target
    ) noexcept;
    
    /**
     * @brief Encryption methods
     */
    [[nodiscard]] size_t encrypted_size() const noexcept;
    [[nodiscard]] size_t encrypt(
        std::span<std::byte> buffer,
        std::span<const std::byte> key
    ) const noexcept;
    [[nodiscard]] std::vector<std::byte> encrypt(
        std::span<const std::byte> key
    ) const;
    [[nodiscard]] static std::optional<SecureMessage> decrypt(
        std::span<const std::byte> buffer,
        std::span<const std::byte> key
    ) noexcept;
    [[nodiscard]] static size_t decrypt(
        std::span<const std::byte> source_buffer,
        SecureMessage* target,
        std::span<const std::byte> key
    ) noexcept;
    
    /**
     * @brief Compression methods
     */
    [[nodiscard]] size_t compressed_size() const noexcept;
    [[nodiscard]] size_t compress(
        std::span<std::byte> buffer
    ) const noexcept;
    [[nodiscard]] std::vector<std::byte> compress() const;
    [[nodiscard]] static std::optional<SecureMessage> decompress(
        std::span<const std::byte> buffer
    ) noexcept;
    [[nodiscard]] static size_t decompress(
        std::span<const std::byte> source_buffer,
        SecureMessage* target
    ) noexcept;
};

} // namespace test
