// Example Psy-C Schema File
// This demonstrates the features of the psy-c serialization tool

namespace example::protocol;

// Simple user credentials structure
struct Credentials {
    username: string;
    @encrypt(algorithm=aes256)  // Password is always encrypted
    password: string;
}

// User profile with various security features
@encrypt(algorithm=chacha20)  // Entire structure is encrypted
struct UserProfile {
    user_id: uint64;
    display_name: string;
    
    @encrypt(algorithm=aes256)  // Double encryption for sensitive data
    email: string;
    
    @hash(algorithm=sha256)     // Store only hash of the secret
    api_secret: bytes;
    
    @compress(algorithm=lz4)    // Compress large profile data
    profile_picture: bytes;
    
    created_timestamp: uint64;
    last_login: uint64;
    
    // Nested structures are supported
    credentials: Credentials;
    
    // Collections
    tags: list<string>;
    settings: map<string, string>;
}

// Transaction record with integrity protection
@hmac(algorithm=sha256)
struct Transaction {
    transaction_id: string;
    from_account: uint64;
    to_account: uint64;
    amount: float64;
    currency: string;
    timestamp: uint64;
    
    @compress(algorithm=fpc)  // FPC compression for numeric data
    exchange_rates: list<float64>;
    
    @encrypt(algorithm=aes256)
    memo: optional<string>;    // Optional encrypted field
}

// Enum for message types
enum MessageType {
    TEXT = 0,
    IMAGE = 1,
    VIDEO = 2,
    AUDIO = 3,
    FILE = 4
}

// Secure messaging
@encrypt(algorithm=chacha20)
struct SecureMessage {
    message_id: string;
    sender_id: uint64;
    recipient_id: uint64;
    type: MessageType;
    
    @compress(algorithm=lz4)
    content: bytes;
    
    @hash(algorithm=xxhash3)  // Fast hash for deduplication
    content_hash: uint32;
    
    timestamp: uint64;
    
    // End-to-end encryption metadata
    @encrypt(algorithm=x25519)  // Key exchange data
    ephemeral_key: bytes;
}

// Configuration with mixed security
struct SystemConfig {
    version: uint32;
    
    @encrypt(algorithm=aes256)
    database_url: string;
    
    @encrypt(algorithm=aes256)
    api_keys: map<string, string>;
    
    // Public settings don't need encryption
    max_connections: uint32;
    timeout_seconds: uint32;
    
    @compress(algorithm=lz4)
    feature_flags: map<string, bool>;
}

// Audit log entry
@cmac(algorithm=aes256)  // MAC for integrity
struct AuditLogEntry {
    entry_id: uint64;
    timestamp: uint64;
    user_id: optional<uint64>;
    action: string;
    resource: string;
    
    @encrypt(algorithm=aes256)
    details: map<string, string>;
    
    ip_address: string;
    user_agent: string;
}

// Health check data
struct HealthMetrics {
    timestamp: uint64;
    
    @compress(algorithm=fpc)  // Efficient float compression
    cpu_usage: float64;
    memory_usage: float64;
    disk_usage: float64;
    
    active_connections: uint32;
    requests_per_second: float64;
    
    @compress(algorithm=lz4)
    error_logs: list<string>;
}