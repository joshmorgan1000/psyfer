// Test schema for crypto integration
namespace crypto_integration_test;

// Test AES-256-GCM encryption
@encrypt(algorithm=aes256)
struct SecureMessage {
    message_id: uint64;
    sender: string;
    content: string;
    timestamp: uint64;
}

// Test ChaCha20-Poly1305 encryption
@encrypt(algorithm=chacha20)
struct SecureDocument {
    doc_id: string;
    title: string;
    @compress(algorithm=lz4)
    body: bytes;
    version: uint32;
}

// Test multiple layers
struct UserData {
    user_id: uint64;
    
    @encrypt(algorithm=aes256)
    api_key: string;
    
    @encrypt(algorithm=chacha20)
    private_notes: string;
    
    @hash(algorithm=sha256)
    password: string;
    
    @compress(algorithm=lz4)
    avatar: bytes;
    
    @compress(algorithm=fpc)
    metrics: list<float64>;
}

// Test HMAC/CMAC
@hmac(algorithm=sha256)
struct AuthenticatedData {
    sequence: uint64;
    data: bytes;
    timestamp: uint64;
}

@cmac(algorithm=aes256)
struct IntegrityProtectedConfig {
    version: uint32;
    settings: map<string, string>;
    last_modified: uint64;
}